Description: Use constant time comparison in tempURL
 Use constant time comparison when evaluating tempURL to avoid timing attacks.
Author: Samuel Merritt <sam@swiftstack.com>
Origin: upstream, https://review.openstack.org/#/c/67185/
Date: Thu, 16 Jan 2014 12:40:53 +0000 (+0100)
Subject: Use constant time comparison in tempURL
X-Git-Url: https://review.openstack.org/gitweb?p=openstack%2Fswift.git;a=commitdiff_plain;h=754633988931e4095530f6b13389c254096eb485
Bug-Ubuntu: https://launchpad.net/bugs/1265665
Bug-Debian: http://bugs.debian.org/735582
Last-Update: 2013-01-17

--- swift-1.11.0.orig/swift/common/middleware/tempurl.py
+++ swift-1.11.0/swift/common/middleware/tempurl.py
@@ -97,7 +97,7 @@ from urlparse import parse_qs
 from swift.proxy.controllers.base import get_account_info
 from swift.common.swob import HeaderKeyDict, HTTPUnauthorized
 from swift.common.utils import split_path, get_valid_utf8_str, \
-    register_swift_info, get_hmac
+    register_swift_info, get_hmac, streq_const_time
 
 
 #: Default headers to remove from incoming requests. Simply a whitespace
@@ -275,7 +275,13 @@ class TempURL(object):
                                 request_method='PUT'))
         else:
             hmac_vals = self._get_hmacs(env, temp_url_expires, keys)
-        if temp_url_sig not in hmac_vals:
+
+        # While it's true that any() will short-circuit, this doesn't affect
+        # the timing-attack resistance since the only way this will
+        # short-circuit is when a valid signature is passed in.
+        is_valid_hmac = any(streq_const_time(temp_url_sig, hmac)
+                            for hmac in hmac_vals)
+        if not is_valid_hmac:
             return self._invalid(env, start_response)
         self._clean_incoming_headers(env)
         env['swift.authorize'] = lambda req: None
